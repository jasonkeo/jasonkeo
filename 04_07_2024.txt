/*
To do:
-watch course
-read js,django rest,C# doc
-implement algo
-do leetcode
-do course

-code
-finish notes
*/



Neetcode
-big O notation
-recursion
    -structure of recursion


-static arrays vs dynamic arrays
    -arrays in general have addresses that are incremented based on the size that they are
    -static arrays have fixed space
-pointers
    -point to the address not the variable??
-understand how traversing trees

-Sorting

-Searching
    -BST
    -DFS
    -BFS

-Linkedlist
    -objects that point to each other
    -

Neetcode problems
-2 sum
-reverse a Linkedlist
-inserting a node into middle of Linkedlist
-is paradigm


C#


React and also Javascript

-useEffect
    -runs code when the depedancy (variables) changes or on mount of component by default
    -sytanx
        -useEffect(() => {


        } , [])
-useState
    -a way to render dynamic data, also can be used to parse data from child to parent, also state Management
    -syntax
    - let [variable, changeVariable] = useState("intial data");
        -if changeVariable("s") then the component holding the code will rerender
    

-useContext
    -used to pass infomation from parent to child components
    -syntax 
        -import
        -let s = createContext(null)
        -<s.Provider> </s.Provider>

        -child component => useContext(s)

    


-
-useRef 
-fetch
    -sytanx and parameters
    -usually wrapped around in a try catch and also an async function to prevent the call from blocking the thread
-import syntax
    -import module or {function_1, function_2} from 'path';

-other notes
    -sometimes when u write a function thats going to be called it when
        -infinite rerender
    -object cant be used because it could be null
    -if u want to write javascript with html use {} to run code or maybe refernce variables
    -state management
        -

-callbacks vs .then()
    -syntax of callback
        -function XYZ(callback) {
            //code
            callback
        }


-map vs foreach

-async functions and promises


-for loops

-logic in javascript

Typescript
-when to specify types
    -declaring variables, asking for parameters in function, objects

-sytanx of typescript
    -let,var, const XYZ : type = value;
    -function XYZ(paramter: type): return_type
     { code;}
    -interface XYZ = { param1: type, param2: type}
-types
    -string, boolean, number, boolean
-interfaces
- or method




System Design
-RAM, CPU and Storage
    -1 thread
-scaling horzontilally vs vertically

-data is sent in packets which sometimes contain pieces of a large item that then can be assembled together once all the packets are sent
-ports are certain doorways which can be opened to accept these packets
-network protocol is a set of rules which determines how theses the data is sent

Rules of HTTP
-HTTP => CRUD operations
    -GET, PUT, POST, DELETE
-the structure of header (meta data) and body
    -header contains infomation like where it is going
    -body contains infomation like the method and the "pay load"

-TCP vs UDP
    -TCP stands for Transmission Control Protocol
    -it is more reliable but slower
        -this is because it performs a "3 way handshake" where it will send packets back and forth confirming if packets were actually received
            -in this process it checks if theres a server, servers wants to recieve packets and sending the packet
    -example uses include FTP
    -it has has 
-public ip have 
-HTTP vs HTTPS
-websocket
    -establishes a connection then bidirectional
    -this is better than "palling" which is frequent HTTP requests
    -HTTP 2 actually has same feature
    -this can be used for chatapps as can keep communicating 

-certificates
    -issued by 3rd party company to verify thats its an actual website
    -SSL???
    -from there it hands a public key for everyone to use to scramble data
    -using the private key it then decrypts it


-cookies vs cache
    -both are storing infomation thats going to be used "frequently"
    -but they store different things with different purposes of why
        -cookies store authentication tokens that are sent with each request
        -cache store images, passwords to reduce latency


NoSQL vs SQL
-soft deleting
-
-


SQL queries
-SELECT
    -getting values from columns from table
    -can combine with where??

Django
-ORM - a layer of abstraction over SQL, e.g Django will convert python code to SQL queries
    -orm can protect against SQL injections
-views - take a http request and return a http response
    -this can be a full web page for example or just an api response
    -class based and function based views
-models
-serialiser
    -filtering requests
    -fields certain....
-migrations



TryHackMe and Cyber
-finding vulnerabilties
    -endpoint
    -coding and technologies
        -ssh
    -injection and css
    -not protecting properly

-encryption algorithms and what they are used for
    -caespher cipher
    -base64
    -hmac
    -RSA

-phinising and social engineerings 
-malware
-DATA leaks
-endpoint/API vulnerabilties
    -sql injection
-ASCII and UTF-8
-cross site scripting
-proxies
-symmetric and assymetric encryption
-hashing
    -weak passwords